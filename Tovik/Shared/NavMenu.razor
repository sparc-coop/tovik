<nav>
    <div class="right">
        <SparcAura />
        <button class="menu-btn" @onclick=ToggleMobileMenu>
            <MenuIcon />
        </button>
    </div>
    <div class="nav-menu @(showMobileMenu ? "show" : "")">
        <SecondaryLogo />
        <ul>
            @foreach (var domain in Domains)
            {
                <li>
                    <NavLink class="nav-link" href="@("/sites/" + domain.Id)" Match=NavLinkMatch.Prefix ActiveClass="active" @onclick=ToggleMobileMenu><BubbleTail />@domain.Domain</NavLink>
                </li>
            }
            <li><NavLink class="nav-link" href="/credits" ActiveClass="active" @onclick=ToggleMobileMenu><BubbleTail />Made with ❤️</NavLink></li>
        </ul>
    </div>
    <div class="nav-mask">
        <img src="/images/NavShape.png" />
    </div>
</nav>
<div class="nav-overlay @(showOverlay ? "show" : "") @(hideOverlay ? "hiding" :"")" @onclick=ToggleMobileMenu></div>
<div class="nav-sidebar">
    <div class="nav-menu @(showMobileMenu ? "show" : "")">
        <PrimaryLogo FontColor="#FF945E" />
        <ul>
            @foreach (var domain in Domains)
            {
                <li>
                    <NavLink class="nav-link" href="@("/sites/" + domain.Id)" Match=NavLinkMatch.Prefix ActiveClass="active" @onclick=ToggleMobileMenu><BubbleTail />@domain.Domain</NavLink>
                </li>
            }
            <li><NavLink class="nav-link" href="/credits" ActiveClass="active" @onclick=ToggleMobileMenu><BubbleTail />Made with ❤️</NavLink></li>
        </ul>
    </div>
</div>

@inject Tovik.Domains.TovikDomains TovikDomains
@code {
    bool showMobileMenu;
    bool showOverlay;
    bool hideOverlay;
    List<SparcDomain> Domains = [];

    protected override async Task OnInitializedAsync()
    {
        Domains = await TovikDomains.All();
    }

    async Task ToggleMobileMenu()
    {
        showMobileMenu = !showMobileMenu;

        if (showMobileMenu)
        {
            showOverlay = true;
            hideOverlay = false;
        } else
        {
            hideOverlay = true;
            StateHasChanged();
            await Task.Delay(800);
            showOverlay = false;
            hideOverlay = false;
        }
    }
}