@page "/"
@page "/preview/{Url}"
@page "/preview"
@layout NewHomeLayout
@using Tovik.Domains
@using Tovik.Translation

<HeadContent>
    <script type="text/javascript">
        function initPreview(dotNet) {
            window.addEventListener('message', (event) => {
                if (event.data && event.data.startsWith && event.data.startsWith('tovik')) {
                    let url = event.data.replace('tovik-url:', '');
                    dotNet.invokeMethodAsync('UpdateUrl', url);
                }
            });
        }

        function changePreviewLanguage(iframe, lang) {
            iframe.contentWindow.postMessage('tovik-lang:' + lang);
        }
    </script>
    <script src="https://js.stripe.com/v3"></script>
</HeadContent>

<div class="home-container @(IsPreviewing ? "previewing" : "") @(PreviewFirst ? "preview-first" : "")">
    <iframe srcdoc="@PreviewHtml" @ref=IFrame>
    </iframe>

    @if (IsPreviewing)
    {
        <Sparc.Blossom.Content.LanguageSelector WithButton=true Visible=true InitialLanguageId="@PreviewLang" OnLanguageChanged="UpdateLanguage" />
        <div class="fine-print">
            You are viewing a preview of <strong>@Url</strong> with Tovik installed. Some site functionality may not work as expected due to preview browser limitations.
        </div>
    }

    <article>
        <div class="hero-background"><DashedLine Color="#FFD4BF" /></div>
        <header>
            <button @onclick=Home>
                <img src="/images/TovikWordmark.svg" alt="Tovik" />
            </button>

            <div class="buttons">
                @if (!IsPreviewing)
                {
                    <Sparc.Blossom.Content.LanguageSelector WithButton=true />
                }
                else
                {
                    <button class="secondary-btn" @onclick=Home>Learn More</button>
                }
                @if (IsACustomer)
                {
                    <a class="button primary-btn" href="/sites">My Sites</a>
                }
                else
                {
                    <button class="primary-btn" @onclick=TogglePurchaseSidebar>Get Tovik</button>
                }
            </div>
        </header>

        <section>
            <img src="/images/TovikChar.svg" alt="Tovik" />
            <h1>Speaking your website visitors' language isn't optional anymore.</h1>
            <p>
                Tovik is a multilingual translation plugin that quietly translates your site into their native language, without relying on them to bring their own translator.
            </p>
            <form @onsubmit=GoToPreview>
                <input type="text" placeholder="Enter your website's URL" @bind=Url required />
                <button class="primary-btn">Try Tovik</button>
            </form>
            @if (ErrorMessage != null)
            {
                <span class="error-message">@ErrorMessage</span>
            }
        </section>

        <div class="two">
            <section>
                <header>
                    <img src="/images/Star.svg" alt="Star" />
                    <h2>130+ Languages, 600+ Dialects</h2>
                </header>
                <p>Your visitors deserve to engage with your content in the language that feels like home.</p>
            </section>
            <section>
                <header>
                    <img src="/images/Star.svg" alt="Star" />
                    <h2>Built for Creators, Not Coders</h2>
                </header>
                <p>Tovik installs with a single line of code or a simple plugin installation, zero setup required.</p>
            </section>
            <section>
                <header>
                    <img src="/images/Star.svg" alt="Star" />
                    <h2>No Invasive Tracking</h2>
                </header>
                <p>Zero unnecessary cookies, zero fingerprints, zero surveillance, zero data harvesting. Just simple, respectful translation.</p>
            </section>
            <section>
                <header>
                    <img src="/images/Star.svg" alt="Star" />
                    <h2>Works On Any Website</h2>
                </header>
                <p>
                    Built for
                    <a href="/install/WordPress">WordPress</a>,
                    <a href="/install/Wix">Wix</a>,
                    <a href="/install/Webflow">Webflow</a>,
                    <a href="/install/Weebly">Weebly</a>,
                    <a href="/install/SquareSpace">SquareSpace</a>,
                    <a href="/install/Shopify">Shopify</a>,
                    and we have an
                    <a href="/install/HTML">HTML script tag</a>
                    for the rest.
                </p>
            </section>
        </div>

        <Tovik.Home.Pricing OnClick="TogglePurchaseSidebar" />
        <Questions />
    </article>
</div>

@if (IsPurchaseSidebarInitialized)
{
    <aside class="purchase-sidebar @(IsPurchaseSidebarOpen ? "open" : "")">
        <header>
            <button @onclick=TogglePurchaseSidebar>
                <Sparc.Blossom.Authentication.Icons.XIcon />
            </button>
        </header>
        <Tovik.Home.Purchase Domain="@PreviewUrl" />
    </aside>
}

@inject ISparcAura Aura
@inject TovikCrawler Crawler
@inject TovikDomains Domains
@inject IJSRuntime Js
@code {
        [Parameter] public string? Url { get; set; }
        [Parameter][SupplyParameterFromQuery] public string? PreviewLang { get; set; }
        [Parameter][SupplyParameterFromQuery] public string? PaymentIntentId { get; set; }
        [Parameter][SupplyParameterFromQuery(Name = "u")] public string? QueryUrl { get; set; }
        bool IsACustomer;
        bool IsPreviewing;
        bool PreviewFirst;
        string? PreviewHtml;
        string? PreviewUrl;
        string? ErrorMessage;
        ElementReference IFrame;
        bool IsPurchaseSidebarOpen;
        bool IsPurchaseSidebarInitialized;

    protected override async Task OnInitializedAsync()
    {
        var domains = await Domains.All();
        IsACustomer = domains.Any();
        PreviewFirst = !string.IsNullOrWhiteSpace(Url) || !string.IsNullOrWhiteSpace(QueryUrl);
        if (PaymentIntentId != null)
        {
            IsPurchaseSidebarInitialized = true;
            IsPurchaseSidebarOpen = true;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(Url) && Url != PreviewUrl)
        {
            PreviewUrl = Url;
            await PreviewSite();
        }
        else if (!string.IsNullOrWhiteSpace(QueryUrl) && QueryUrl != PreviewUrl)
        {
            Url = QueryUrl;
            PreviewUrl = Url;
            await PreviewSite();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await Js.InvokeVoidAsync("initPreview", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async Task UpdateUrl(string url)
    {
        if (url != Url)
        {
            Url = url;
            PreviewHtml = await Crawler.PreviewAsync(Url, PreviewLang);
            StateHasChanged();
        }
    }

    void TogglePurchaseSidebar()
    {
        IsPurchaseSidebarInitialized = true;
        IsPurchaseSidebarOpen = !IsPurchaseSidebarOpen;
    }

    void GoToPreview()
    {
        Nav.NavigateTo($"/preview?u={Url}", PreviewUrl != null);
    }

    async Task PreviewSite()
    {
        if (Url == null)
            return;

        ErrorMessage = null;
        PreviewHtml = null;

        var domain = await Domains.Verify(Url);
        if (domain != null)
        {
            PreviewLang = domain.LastTranslatedLanguage
                ?? Sparc.Blossom.Content.Language.Random.Id;

            IsPreviewing = true;
        }
        else
        {
            ErrorMessage = "Please enter a valid URL.";
        }
    }

    async Task UpdateLanguage(Sparc.Blossom.Content.Language lang)
    {
        PreviewLang = lang.Id;
        if (PreviewHtml == null)
        {
            PreviewHtml = await Crawler.PreviewAsync(Url!, PreviewLang);
            StateHasChanged();
        }
        else
        {
            await Js.InvokeVoidAsync("changePreviewLanguage", IFrame, PreviewLang);
        }
    }

    void Home()
    {
        IsPreviewing = false;
        PreviewHtml = null;
    }
}
