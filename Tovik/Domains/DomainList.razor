@page "/sites"
@using Tovik.Installation
@layout MainLayout

<PageTitle>Tovik - My Websites</PageTitle>

<article class="home">
    <div class="page-container">
        @if (Limit > 0 && !Domains.Any())
        {
            <section class="welcome">
                <img src="/images/Star.svg" alt="Star" />
                <header>
                    <h3>Welcome to Tovik!</h3>
                </header>
                <p>
                    We're so happy you're here.
                </p>
                <p>
                    Tovik is designed to make it easy to translate your website into multiple languages, so you can reach a global audience without the hassle of managing translations manually.
                </p>
                <p>
                    To get started, <span>enter the domain name</span> for the website where you'd like to install Tovik. Next, we'll guide you through adding a single line of code to get Tovik up and running.
                </p>
            </section>
        }

        <section class="manage-domains">
            <header>
                <h3>My Websites</h3>
            </header>
            @if (!Domains.Any())
            {
                <p>Enter the domain name of the website where you will be installing Tovik.</p>
            }

            @if (Domains.Any())
            {
                <p>
                    Manage your Tovik-enabled websites here. You can add as many domains as you'd like!
                </p>
                <table class="domains-table">
                    <thead>
                        <tr>
                            <td>Domain</td>
                            <td>Pages Translated</td>
                            <td></td>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var domain in Domains)
                        {
                            <DomainCard Domain=domain PageType="home" OnDelete=DeleteDomain />
                        }
                    </tbody>
                </table>
            }

            @if (Error != null)
            {
                <div class="error-message">@Error</div>
            }

            <label>
                <input type="text" placeholder="Enter a domain name" @bind="NewDomain" @bind:event="oninput" />
            </label>
            <div class="btn-container">
                <button class="add-btn primary-btn" @onclick=AddDomain disabled="@IsVerifying">
                    @(IsVerifying ? "Verifying..." : "Add Domain")
                </button>
            </div>
        </section>

        <section class="word-usage">
            <header>
                <h3>Tovik Usage</h3>
            </header>

            @if (IsTrial)
            {
                <p>Your free trial of Tovik includes @Limit.ToString("N0") pages, with no time limits or restrictions.</p>
            }
            else
            {
                <p>Thank you for supporting Tovik with your purchase!</p>
            }
            <div>
                <h4>Pages Translated</h4>
                <UsageMeter Usage=Usage Limit=Limit />
            </div>
        </section>


        @if (IsTrial && Product != null)
        {
            <section class="trial">
                <header>
                    <img src="/images/Star.svg" alt="Star" />
                </header>
                <div>
                    <h2>
                        Buy Tovik
                        <span>@Product.FormattedPrice</span>
                    </h2>
                    <ul>
                        <li>
                            <h3><span>500</span> Pages Included</h3>
                            <p>Massive multilingual coverage in a single bundle.</p>
                        </li>
                        <li>
                            <h3><span>Unlimited</span> Domains</h3>
                            <p>Use across all your sites, no restrictions.</p>
                        </li>
                        <li>
                            <h3>One-Time Payment</h3>
                            <p>No subscription, no recurring fee.</p>
                        </li>
                        <li>
                            <h3>Local-Friendly Checkout</h3>
                            <p>Pay in your preferred currency.</p>
                        </li>
                        <li>
                            <h3>Yours To Keep</h3>
                            <p>No expiration, no time limits.</p>
                        </li>
                        <li>
                            <h3>Privacy First</h3>
                            <p>No tracking, no data harvesting.</p>
                        </li>
                    </ul>
                </div>
                <footer>
                    <button class="add-btn primary-btn" @onclick=Buy>Buy on Sparc Store &rarr;</button>
                </footer>
            </section>
        }
    </div>
</article>

@inject Tovik.Domains.TovikDomains TovikDomains
@inject ISparcAura Aura
@inject IConfiguration Config
@inject ISparcBilling Billing

@code {
    List<SparcDomain> Domains = new();
    string NewDomain = "";
    string? Error;
    GetProductResponse? Product;
    [SupplyParameterFromQuery] public string? Welcome { get; set; }
    bool IsVerifying;

    int Usage;
    int Limit;
    bool IsTrial => Limit <= 10;

    protected override async Task OnInitializedAsync()
    {
        var user = await Aura.UserInfo();
        var product = user.Product("Tovik");

        var options = Welcome == "Sapient" || Welcome == "Morbidology"
            ? new SparcProductActivationOptions(20)
            : null;

        if (product == null) // Start free trial
            product = await Aura.Activate("Tovik", options);

        await LoadDomains();
        Limit = product.MaxUsage;
        Usage = Domains.Sum(d => d.TovikUsage);
        Product = await Billing.GetProductAsync(Config["ProductId"]!);
    }

    private async Task Buy()
    {
        var totp = await Aura.GetSparcCode();
        if (totp != null)
            Nav.NavigateTo($"{Config["SparcStore"]}?_auth=totp:{totp.Code}");
    }

    private async Task LoadDomains()
    {
        Domains = await TovikDomains.All();
    }

    private async Task AddDomain()
    {
        IsVerifying = true;
        StateHasChanged();

        try
        {
            var newDomain = await TovikDomains.RegisterAsync(NewDomain);
            NewDomain = "";
            Nav.NavigateTo($"/sites/{newDomain.Id}");
        }
        catch (Exception ex)
        {
            Error = ex.Message;
            NewDomain = "";
        }

        IsVerifying = false;
    }

    private async Task DeleteDomain(SparcDomain domain)
    {
        await TovikDomains.DeleteAsync(domain);
        await LoadDomains();
    }
}